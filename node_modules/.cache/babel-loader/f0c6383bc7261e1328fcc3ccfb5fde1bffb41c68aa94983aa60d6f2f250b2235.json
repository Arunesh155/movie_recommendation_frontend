{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [favorites, setFavorites] = useState([]); // State for favorites\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        // Filter to include only specific genres like Comedy, Crime, Horror\n        setGenres(response.data.genres.filter(genre => ['Comedy', 'Crime', 'Horror'].includes(genre.name)));\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch movies whenever selectedGenre, searchQuery, or page changes\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Build API query based on selected genre and search query\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n        const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`);\n\n        // If page is 1, replace the movies; otherwise, append to the existing list\n        setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n        setTotalPages(response.data.total_pages);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies(); // Call the function to fetch movies based on current state\n  }, [selectedGenre, searchQuery, page]); // Re-run whenever these dependencies change\n\n  // Infinite scroll functionality\n  useEffect(() => {\n    const handleScroll = () => {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = document.documentElement;\n      if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n        setPage(prevPage => prevPage + 1);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [page, totalPages]);\n\n  // Filtered movies based on search query\n  const filteredMovies = movies.filter(movie => movie.title.toLowerCase().includes(searchQuery.toLowerCase()));\n\n  // Function to toggle favorite status\n  const toggleFavorite = movie => {\n    if (favorites.some(fav => fav.id === movie.id)) {\n      setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove from favorites\n    } else {\n      setFavorites([...favorites, movie]); // Add to favorites\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tamil Movie Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: filteredMovies,\n      toggleFavorite: toggleFavorite,\n      favorites: favorites\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"woQ+yxunhobziTvUHF5MatClOMQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","jsxDEV","_jsxDEV","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","favorites","setFavorites","fetchGenres","response","get","data","filter","genre","includes","name","error","console","fetchMovies","genreParam","searchParam","prevMovies","results","total_pages","handleScroll","scrollTop","scrollHeight","clientHeight","document","documentElement","prevPage","window","addEventListener","removeEventListener","filteredMovies","movie","title","toLowerCase","toggleFavorite","some","fav","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [favorites, setFavorites] = useState([]); // State for favorites\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                // Filter to include only specific genres like Comedy, Crime, Horror\n                setGenres(response.data.genres.filter(genre =>\n                    ['Comedy', 'Crime', 'Horror'].includes(genre.name)\n                ));\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch movies whenever selectedGenre, searchQuery, or page changes\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Build API query based on selected genre and search query\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`\n                );\n\n                // If page is 1, replace the movies; otherwise, append to the existing list\n                setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n\n                setTotalPages(response.data.total_pages);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies(); // Call the function to fetch movies based on current state\n    }, [selectedGenre, searchQuery, page]); // Re-run whenever these dependencies change\n\n    // Infinite scroll functionality\n    useEffect(() => {\n        const handleScroll = () => {\n            const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n            if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n                setPage(prevPage => prevPage + 1);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [page, totalPages]);\n\n    // Filtered movies based on search query\n    const filteredMovies = movies.filter(movie =>\n        movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    // Function to toggle favorite status\n    const toggleFavorite = (movie) => {\n        if (favorites.some(fav => fav.id === movie.id)) {\n            setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove from favorites\n        } else {\n            setFavorites([...favorites, movie]); // Add to favorites\n        }\n    };\n\n    return (\n        <div className=\"app-container\">\n            <h1>Tamil Movie Recommendations</h1>\n            {/* Search bar for searching movies */}\n            <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n\n            {/* Filter bar for filtering by genre */}\n            <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n\n            {/* List of movies with favorite functionality */}\n            <MovieList movies={filteredMovies} toggleFavorite={toggleFavorite} favorites={favorites} />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}