{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SearchBar from './components/SearchBar';\nimport FilterBar from './components/FilterBar';\nimport MovieList from './components/MovieList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a';\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch genres (Comedy, Crime, Horror)\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        const allowedGenres = response.data.genres.filter(genre => ['Comedy', 'Crime', 'Horror'].includes(genre.name));\n        setGenres(allowedGenres);\n      } catch (error) {\n        setError('Error fetching genres.');\n      }\n    };\n    fetchGenres();\n  }, []);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n        let endpoint = searchQuery ? `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&page=${page}` : `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&page=${page}${genreParam}`;\n        const response = await axios.get(endpoint);\n        setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n        setTotalPages(response.data.total_pages);\n        setError(null);\n      } catch (error) {\n        setError('Error fetching movies. Please try again later.');\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre, searchQuery, page]);\n  const loadMoreMovies = () => {\n    if (page < totalPages) {\n      setPage(page + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : movies.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MovieList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), page < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadMoreMovies,\n        children: \"Load More Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No movies found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"zP08oJiP7OZXka90UVYaAUUfvqc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","SearchBar","FilterBar","MovieList","jsxDEV","_jsxDEV","Fragment","_Fragment","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","error","setError","fetchGenres","response","get","allowedGenres","data","filter","genre","includes","name","fetchMovies","genreParam","searchParam","endpoint","prevMovies","results","total_pages","loadMoreMovies","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SearchBar from './components/SearchBar';\nimport FilterBar from './components/FilterBar';\nimport MovieList from './components/MovieList';\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a';\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        // Fetch genres (Comedy, Crime, Horror)\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                const allowedGenres = response.data.genres.filter(genre =>\n                    ['Comedy', 'Crime', 'Horror'].includes(genre.name)\n                );\n                setGenres(allowedGenres);\n            } catch (error) {\n                setError('Error fetching genres.');\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n                let endpoint = searchQuery\n                    ? `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&page=${page}`\n                    : `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&page=${page}${genreParam}`;\n                \n                const response = await axios.get(endpoint);\n                \n                setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n                setTotalPages(response.data.total_pages);\n                setError(null);\n            } catch (error) {\n                setError('Error fetching movies. Please try again later.');\n            }\n        };\n\n        fetchMovies();\n    }, [selectedGenre, searchQuery, page]);\n\n    const loadMoreMovies = () => {\n        if (page < totalPages) {\n            setPage(page + 1);\n        }\n    };\n\n    return (\n        <div className=\"app-container\">\n            <h1>Movie Recommendations</h1>\n            <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n            <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n            \n            {error ? (\n                <p>{error}</p>\n            ) : movies.length > 0 ? (\n                <>\n                    <MovieList movies={movies} />\n                    {page < totalPages && (\n                        <button onClick={loadMoreMovies}>Load More Movies</button>\n                    )}\n                </>\n            ) : (\n                <p>No movies found.</p>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}