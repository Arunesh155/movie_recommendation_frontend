{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport { FavoritesProvider } from './FavoritesContext'; // Import FavoritesProvider\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        setGenres(response.data.genres.filter(genre => ['Comedy', 'Horror', 'Romance', 'Crime', 'Action', 'Drama', 'Thriller'].includes(genre.name)));\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch movies whenever selectedGenre, searchQuery, or page changes\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n        const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`);\n        setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n        setTotalPages(response.data.total_pages);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre, searchQuery, page]);\n\n  // Handle search and clear functionality\n  const handleSearch = () => {\n    setPage(1); // Reset to the first page on search\n  };\n  const handleClear = () => {\n    setSearchQuery(''); // Clear the search input\n    setSelectedGenre(''); // Reset genre filter\n    setPage(1); // Reset to the first page\n  };\n\n  // Filtered movies based on search query\n  const filteredMovies = movies.filter(movie => movie.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tamil Movie Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        searchQuery: searchQuery,\n        setSearchQuery: setSearchQuery,\n        onSearch: handleSearch,\n        onClear: handleClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n        genres: genres,\n        selectedGenre: selectedGenre,\n        setSelectedGenre: setSelectedGenre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n        movies: filteredMovies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"SOWhmo/lIMjedn4OOBl2c8mu++k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","FavoritesProvider","jsxDEV","_jsxDEV","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","fetchGenres","response","get","data","filter","genre","includes","name","error","console","fetchMovies","genreParam","searchParam","prevMovies","results","total_pages","handleSearch","handleClear","filteredMovies","movie","title","toLowerCase","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onClear","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport { FavoritesProvider } from './FavoritesContext'; // Import FavoritesProvider\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                setGenres(response.data.genres.filter(genre =>\n                    ['Comedy', 'Horror', 'Romance', 'Crime', 'Action', 'Drama', 'Thriller'].includes(genre.name)\n                ));\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch movies whenever selectedGenre, searchQuery, or page changes\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`\n                );\n\n                setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n                setTotalPages(response.data.total_pages);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies();\n    }, [selectedGenre, searchQuery, page]);\n\n    // Handle search and clear functionality\n    const handleSearch = () => {\n        setPage(1); // Reset to the first page on search\n    };\n\n    const handleClear = () => {\n        setSearchQuery(''); // Clear the search input\n        setSelectedGenre(''); // Reset genre filter\n        setPage(1); // Reset to the first page\n    };\n\n    // Filtered movies based on search query\n    const filteredMovies = movies.filter(movie =>\n        movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <FavoritesProvider>\n            <div className=\"app-container\">\n                <h1>Tamil Movie Recommendations</h1>\n                <SearchBar \n                    searchQuery={searchQuery} \n                    setSearchQuery={setSearchQuery} \n                    onSearch={handleSearch} \n                    onClear={handleClear} \n                />\n                <FilterBar \n                    genres={genres} \n                    selectedGenre={selectedGenre} \n                    setSelectedGenre={setSelectedGenre} \n                />\n                <MovieList \n                    movies={filteredMovies} \n                />\n            </div>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}