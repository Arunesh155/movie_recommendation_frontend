{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport MovieList from './components/MovieList';\nimport FavoritesPage from './components/FavoritesPage';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport { FavoritesProvider } from './FavoritesContext';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // List of required genres\n  const requiredGenres = ['Crime', 'Horror', 'Romance', 'Comedy', 'Thriller', 'Action', 'Drama'];\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        // Filter genres based on required genres\n        const filteredGenres = response.data.genres.filter(genre => requiredGenres.includes(genre.name));\n        setGenres(filteredGenres);\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch Tamil movies with pagination for more results\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const moviesArray = [];\n        const totalPages = 10; // Adjust this number to fetch more pages\n\n        for (let page = 1; page <= totalPages; page++) {\n          const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}`);\n          moviesArray.push(...response.data.results);\n        }\n        setMovies(moviesArray);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n  }, []);\n\n  // Handle search and clear functionality\n  const handleSearch = () => {\n    // Logic for handling search\n  };\n  const handleClear = () => {\n    setSearchQuery(''); // Clear the search input\n    setSelectedGenre(''); // Reset genre filter\n  };\n\n  // Filtered movies based on search query and selected genre\n  const filteredMovies = movies.filter(movie => {\n    const matchesGenre = selectedGenre ? movie.genre_ids.includes(Number(selectedGenre)) : true; // If no genre is selected, all genres match\n    const matchesSearch = movie.title.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesGenre && matchesSearch;\n  });\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tamil Movie Recommendations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/favorites\",\n            children: \"Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n          searchQuery: searchQuery,\n          setSearchQuery: setSearchQuery,\n          onSearch: handleSearch,\n          onClear: handleClear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n          genres: genres,\n          selectedGenre: selectedGenre,\n          setSelectedGenre: setSelectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(MovieList, {\n              movies: filteredMovies\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/favorites\",\n            element: /*#__PURE__*/_jsxDEV(FavoritesPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 59\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"auQb2NgxKJTEy6+S40ggfer6ghI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","BrowserRouter","Router","Route","Routes","Link","MovieList","FavoritesPage","FilterBar","SearchBar","FavoritesProvider","jsxDEV","_jsxDEV","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","requiredGenres","fetchGenres","response","get","filteredGenres","data","filter","genre","includes","name","error","console","fetchMovies","moviesArray","totalPages","page","push","results","handleSearch","handleClear","filteredMovies","movie","matchesGenre","genre_ids","Number","matchesSearch","title","toLowerCase","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","onSearch","onClear","path","element","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\n\nimport MovieList from './components/MovieList';\nimport FavoritesPage from './components/FavoritesPage';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\n\nimport { FavoritesProvider } from './FavoritesContext';\n\nimport './App.css';\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n\n    // List of required genres\n    const requiredGenres = ['Crime', 'Horror', 'Romance', 'Comedy', 'Thriller', 'Action', 'Drama'];\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                // Filter genres based on required genres\n                const filteredGenres = response.data.genres.filter(genre =>\n                    requiredGenres.includes(genre.name)\n                );\n                setGenres(filteredGenres);\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch Tamil movies with pagination for more results\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                const moviesArray = [];\n                const totalPages = 10; // Adjust this number to fetch more pages\n\n                for (let page = 1; page <= totalPages; page++) {\n                    const response = await axios.get(\n                        `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}`\n                    );\n\n                    moviesArray.push(...response.data.results);\n                }\n\n                setMovies(moviesArray);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies();\n    }, []);\n\n    // Handle search and clear functionality\n    const handleSearch = () => {\n        // Logic for handling search\n    };\n\n    const handleClear = () => {\n        setSearchQuery(''); // Clear the search input\n        setSelectedGenre(''); // Reset genre filter\n    };\n\n    // Filtered movies based on search query and selected genre\n    const filteredMovies = movies.filter(movie => {\n        const matchesGenre = selectedGenre\n            ? movie.genre_ids.includes(Number(selectedGenre))\n            : true; // If no genre is selected, all genres match\n        const matchesSearch = movie.title.toLowerCase().includes(searchQuery.toLowerCase());\n        return matchesGenre && matchesSearch;\n    });\n\n    return (\n        <FavoritesProvider>\n            <Router>\n                <div className=\"app-container\">\n                    <h1>Tamil Movie Recommendations</h1>\n                    <nav>\n                        <Link to=\"/\">Home</Link>\n                        <Link to=\"/favorites\">Favorites</Link>\n                    </nav>\n                    <SearchBar \n                        searchQuery={searchQuery} \n                        setSearchQuery={setSearchQuery} \n                        onSearch={handleSearch} \n                        onClear={handleClear} \n                    />\n                    <FilterBar \n                        genres={genres} \n                        selectedGenre={selectedGenre} \n                        setSelectedGenre={setSelectedGenre} \n                    />\n                    <Routes>\n                        <Route path=\"/\" element={<MovieList movies={filteredMovies} />} />\n                        <Route path=\"/favorites\" element={<FavoritesPage />} />\n                    </Routes>\n                </div>\n            </Router>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,kBAAkB;AAE/E,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAE9C,SAASC,iBAAiB,QAAQ,oBAAoB;AAEtD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,YAAY,GAAG,kCAAkC,CAAC,CAAC;;AAEzD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAM0B,cAAc,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC;;EAE9F;EACAzB,SAAS,CAAC,MAAM;IACZ,MAAM0B,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAC5B,yDAAyDd,YAAY,iBACzE,CAAC;QACD;QACA,MAAMe,cAAc,GAAGF,QAAQ,CAACG,IAAI,CAACX,MAAM,CAACY,MAAM,CAACC,KAAK,IACpDP,cAAc,CAACQ,QAAQ,CAACD,KAAK,CAACE,IAAI,CACtC,CAAC;QACDd,SAAS,CAACS,cAAc,CAAC;MAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IACDT,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1B,SAAS,CAAC,MAAM;IACZ,MAAMqC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,WAAW,GAAG,EAAE;QACtB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;QAEvB,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAID,UAAU,EAAEC,IAAI,EAAE,EAAE;UAC3C,MAAMb,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAC5B,uDAAuDd,YAAY,mCAAmC0B,IAAI,EAC9G,CAAC;UAEDF,WAAW,CAACG,IAAI,CAAC,GAAGd,QAAQ,CAACG,IAAI,CAACY,OAAO,CAAC;QAC9C;QAEAxB,SAAS,CAACoB,WAAW,CAAC;MAC1B,CAAC,CAAC,OAAOH,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDE,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,YAAY,GAAGA,CAAA,KAAM;IACvB;EAAA,CACH;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtBpB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACpBF,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMuB,cAAc,GAAG5B,MAAM,CAACc,MAAM,CAACe,KAAK,IAAI;IAC1C,MAAMC,YAAY,GAAG1B,aAAa,GAC5ByB,KAAK,CAACE,SAAS,CAACf,QAAQ,CAACgB,MAAM,CAAC5B,aAAa,CAAC,CAAC,GAC/C,IAAI,CAAC,CAAC;IACZ,MAAM6B,aAAa,GAAGJ,KAAK,CAACK,KAAK,CAACC,WAAW,CAAC,CAAC,CAACnB,QAAQ,CAACV,WAAW,CAAC6B,WAAW,CAAC,CAAC,CAAC;IACnF,OAAOL,YAAY,IAAIG,aAAa;EACxC,CAAC,CAAC;EAEF,oBACIrC,OAAA,CAACF,iBAAiB;IAAA0C,QAAA,eACdxC,OAAA,CAACV,MAAM;MAAAkD,QAAA,eACHxC,OAAA;QAAKyC,SAAS,EAAC,eAAe;QAAAD,QAAA,gBAC1BxC,OAAA;UAAAwC,QAAA,EAAI;QAA2B;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpC7C,OAAA;UAAAwC,QAAA,gBACIxC,OAAA,CAACP,IAAI;YAACqD,EAAE,EAAC,GAAG;YAAAN,QAAA,EAAC;UAAI;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACxB7C,OAAA,CAACP,IAAI;YAACqD,EAAE,EAAC,YAAY;YAAAN,QAAA,EAAC;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC,eACN7C,OAAA,CAACH,SAAS;UACNa,WAAW,EAAEA,WAAY;UACzBC,cAAc,EAAEA,cAAe;UAC/BoC,QAAQ,EAAEjB,YAAa;UACvBkB,OAAO,EAAEjB;QAAY;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eACF7C,OAAA,CAACJ,SAAS;UACNU,MAAM,EAAEA,MAAO;UACfE,aAAa,EAAEA,aAAc;UAC7BC,gBAAgB,EAAEA;QAAiB;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,eACF7C,OAAA,CAACR,MAAM;UAAAgD,QAAA,gBACHxC,OAAA,CAACT,KAAK;YAAC0D,IAAI,EAAC,GAAG;YAACC,OAAO,eAAElD,OAAA,CAACN,SAAS;cAACU,MAAM,EAAE4B;YAAe;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAClE7C,OAAA,CAACT,KAAK;YAAC0D,IAAI,EAAC,YAAY;YAACC,OAAO,eAAElD,OAAA,CAACL,aAAa;cAAA+C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAE5B,CAAC;AAAC1C,EAAA,CAnGID,GAAG;AAAAiD,EAAA,GAAHjD,GAAG;AAqGT,eAAeA,GAAG;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}