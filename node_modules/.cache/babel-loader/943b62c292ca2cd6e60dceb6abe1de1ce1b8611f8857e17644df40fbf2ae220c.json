{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext'; // Provider for managing favorites\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [favorites, setFavorites] = useState([]); // State to store favorites\n  const [showFavorites, setShowFavorites] = useState(false); // State to manage view\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        // Filter to include only specific genres like Comedy, Crime, Horror\n        setGenres(response.data.genres.filter(genre => ['Comedy', 'Crime', 'Horror'].includes(genre.name)));\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch movies whenever selectedGenre, searchQuery, or page changes\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Build API query based on selected genre and search query\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n        const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`);\n\n        // If page is 1, replace the movies; otherwise, append to the existing list\n        setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n        setTotalPages(response.data.total_pages);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies(); // Call the function to fetch movies based on current state\n  }, [selectedGenre, searchQuery, page]); // Re-run whenever these dependencies change\n\n  // Infinite scroll functionality\n  useEffect(() => {\n    const handleScroll = () => {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = document.documentElement;\n      if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n        setPage(prevPage => prevPage + 1);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [page, totalPages]);\n\n  // Function to add or remove a movie from favorites\n  const toggleFavorite = movie => {\n    if (favorites.some(favorite => favorite.id === movie.id)) {\n      setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove if already a favorite\n    } else {\n      setFavorites([...favorites, movie]); // Add to favorites\n    }\n  };\n\n  // Filtered movies based on search query\n  const filteredMovies = movies.filter(movie => movie.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Tamil Movie Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-links\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(false),\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(true),\n          children: \"Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), !showFavorites ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          searchQuery: searchQuery,\n          setSearchQuery: setSearchQuery\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n          genres: genres,\n          selectedGenre: selectedGenre,\n          setSelectedGenre: setSelectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: filteredMovies,\n          toggleFavorite: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(FavoritesPage, {\n        favorites: favorites,\n        toggleFavorite: toggleFavorite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"2WbW+sOjPryIwvUH2AW+iFz26cY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","FavoritesPage","FavoritesProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","favorites","setFavorites","showFavorites","setShowFavorites","fetchGenres","response","get","data","filter","genre","includes","name","error","console","fetchMovies","genreParam","searchParam","prevMovies","results","total_pages","handleScroll","scrollTop","scrollHeight","clientHeight","document","documentElement","prevPage","window","addEventListener","removeEventListener","toggleFavorite","movie","some","favorite","id","fav","filteredMovies","title","toLowerCase","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext'; // Provider for managing favorites\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [favorites, setFavorites] = useState([]); // State to store favorites\n    const [showFavorites, setShowFavorites] = useState(false); // State to manage view\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                // Filter to include only specific genres like Comedy, Crime, Horror\n                setGenres(response.data.genres.filter(genre =>\n                    ['Comedy', 'Crime', 'Horror'].includes(genre.name)\n                ));\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch movies whenever selectedGenre, searchQuery, or page changes\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Build API query based on selected genre and search query\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`\n                );\n\n                // If page is 1, replace the movies; otherwise, append to the existing list\n                setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n\n                setTotalPages(response.data.total_pages);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies(); // Call the function to fetch movies based on current state\n    }, [selectedGenre, searchQuery, page]); // Re-run whenever these dependencies change\n\n    // Infinite scroll functionality\n    useEffect(() => {\n        const handleScroll = () => {\n            const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n            if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n                setPage(prevPage => prevPage + 1);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [page, totalPages]);\n\n    // Function to add or remove a movie from favorites\n    const toggleFavorite = (movie) => {\n        if (favorites.some(favorite => favorite.id === movie.id)) {\n            setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove if already a favorite\n        } else {\n            setFavorites([...favorites, movie]); // Add to favorites\n        }\n    };\n\n    // Filtered movies based on search query\n    const filteredMovies = movies.filter(movie =>\n        movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <FavoritesProvider>\n            <div className=\"app-container\">\n                <h2>Tamil Movie Recommendations</h2>\n\n                {/* Navigation Links */}\n                <div className=\"nav-links\">\n                    <button onClick={() => setShowFavorites(false)}>Home</button>\n                    <button onClick={() => setShowFavorites(true)}>Favorites</button>\n                </div>\n\n                {/* Conditional Rendering based on showFavorites state */}\n                {!showFavorites ? (\n                    <>\n                        {/* Search bar for searching movies */}\n                        <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n\n                        {/* Filter bar for filtering by genre */}\n                        <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n\n                        {/* List of movies with option to add to favorites */}\n                        <MovieList movies={filteredMovies} toggleFavorite={toggleFavorite} />\n                    </>\n                ) : (\n                    <FavoritesPage favorites={favorites} toggleFavorite={toggleFavorite} />\n                )}\n            </div>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}