{"ast":null,"code":"var _jsxFileName = \"D:\\\\movie - Copy - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext';\nimport Login from './components/Login';\nimport SignUp from './components/Signup';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [favorites, setFavorites] = useState([]);\n  const [showFavorites, setShowFavorites] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [isUserSignedUp, setIsUserSignedUp] = useState(false); // New state to track if user is signed up\n\n  const selectedGenresList = [{\n    id: 28,\n    name: 'Action'\n  }, {\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 27,\n    name: 'Horror'\n  }, {\n    id: 53,\n    name: 'Thriller'\n  }, {\n    id: 80,\n    name: 'Crime'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }];\n\n  // Fetch all movies (with search or genre filtering)\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        let movieResults = [];\n        let totalPages = 20; // Fetch up to 20 pages (400 movies)\n\n        for (let currentPage = 1; currentPage <= totalPages; currentPage++) {\n          let response;\n          if (searchQuery) {\n            // Fetch movies based on search query\n            response = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&with_original_language=te&page=${currentPage}`);\n          } else {\n            // Fetch movies based on selected genre (if any)\n            let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n            response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}${genreParam}&with_original_language=en&page=${currentPage}`);\n          }\n\n          // If response is successful\n          const fetchedMovies = response.data.results;\n          const tamilMovies = fetchedMovies.filter(movie => movie.original_language === 'en');\n          movieResults = [...movieResults, ...tamilMovies]; // Append new movies to results\n\n          // Break if no more movies to fetch\n          if (response.data.total_pages <= currentPage) {\n            break;\n          }\n        }\n\n        // Set movies once all pages are fetched\n        setMovies(movieResults);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre, searchQuery]);\n\n  // Function to toggle a movie as a favorite\n  const toggleFavorite = movie => {\n    if (favorites.some(favorite => favorite.id === movie.id)) {\n      setFavorites(favorites.filter(fav => fav.id !== movie.id));\n    } else {\n      setFavorites([...favorites, movie]);\n    }\n  };\n\n  // Clear search query and reset state\n  const clearSearch = () => {\n    setSearchQuery(''); // Clear the search query\n    setMovies([]); // Clear the movie list\n  };\n\n  // Render app conditionally based on login state and if the user has signed up\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: [!isLoggedIn ? !isUserSignedUp ? /*#__PURE__*/_jsxDEV(SignUp, {\n      onSignUp: () => {\n        setIsUserSignedUp(true);\n        setIsLoggedIn(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: () => setIsLoggedIn(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tamil Movie Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsLoggedIn(false),\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-links\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(false),\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(true),\n          children: \"Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), !showFavorites ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar-container\",\n          children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n            searchQuery: searchQuery,\n            setSearchQuery: setSearchQuery\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSearch,\n            className: \"clear-search-button\",\n            children: \"Clear Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n          genres: selectedGenresList,\n          selectedGenre: selectedGenre,\n          setSelectedGenre: setSelectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: movies,\n          toggleFavorite: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(FavoritesPage, {\n        favorites: favorites,\n        toggleFavorite: toggleFavorite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsSignUp(!isSignUp),\n      children: isSignUp ? 'Go to Login' : 'Go to Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"iXp+rSCygUwMCloJhveK8YTNy04=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","FavoritesPage","FavoritesProvider","Login","SignUp","jsxDEV","_jsxDEV","Fragment","_Fragment","TMDB_API_KEY","App","_s","movies","setMovies","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","favorites","setFavorites","showFavorites","setShowFavorites","isLoggedIn","setIsLoggedIn","isSignUp","setIsSignUp","isUserSignedUp","setIsUserSignedUp","selectedGenresList","id","name","fetchMovies","movieResults","totalPages","currentPage","response","get","genreParam","fetchedMovies","data","results","tamilMovies","filter","movie","original_language","total_pages","error","console","toggleFavorite","some","favorite","fav","clearSearch","children","onSignUp","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","className","onClick","genres","_c","$RefreshReg$"],"sources":["D:/movie - Copy - Copy/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext';\nimport Login from './components/Login';\nimport SignUp from './components/Signup';\nimport './App.css';\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [favorites, setFavorites] = useState([]);\n    const [showFavorites, setShowFavorites] = useState(false);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [isSignUp, setIsSignUp] = useState(false);\n    const [isUserSignedUp, setIsUserSignedUp] = useState(false); // New state to track if user is signed up\n\n    const selectedGenresList = [\n        { id: 28, name: 'Action' },\n        { id: 35, name: 'Comedy' },\n        { id: 18, name: 'Drama' },\n        { id: 27, name: 'Horror' },\n        { id: 53, name: 'Thriller' },\n        { id: 80, name: 'Crime' },\n        { id: 10749, name: 'Romance' },\n    ];\n\n    // Fetch all movies (with search or genre filtering)\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                let movieResults = [];\n                let totalPages = 20;  // Fetch up to 20 pages (400 movies)\n\n                for (let currentPage = 1; currentPage <= totalPages; currentPage++) {\n                    let response;\n\n                    if (searchQuery) {\n                        // Fetch movies based on search query\n                        response = await axios.get(\n                            `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&with_original_language=te&page=${currentPage}`\n                        );\n                    } else {\n                        // Fetch movies based on selected genre (if any)\n                        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                        response = await axios.get(\n                            `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}${genreParam}&with_original_language=en&page=${currentPage}`\n                        );\n                    }\n\n                    // If response is successful\n                    const fetchedMovies = response.data.results;\n                    const tamilMovies = fetchedMovies.filter(movie => movie.original_language === 'en');\n                    movieResults = [...movieResults, ...tamilMovies];  // Append new movies to results\n\n                    // Break if no more movies to fetch\n                    if (response.data.total_pages <= currentPage) {\n                        break;\n                    }\n                }\n\n                // Set movies once all pages are fetched\n                setMovies(movieResults);\n\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies();\n    }, [selectedGenre, searchQuery]);\n\n    // Function to toggle a movie as a favorite\n    const toggleFavorite = (movie) => {\n        if (favorites.some(favorite => favorite.id === movie.id)) {\n            setFavorites(favorites.filter(fav => fav.id !== movie.id));\n        } else {\n            setFavorites([...favorites, movie]);\n        }\n    };\n\n    // Clear search query and reset state\n    const clearSearch = () => {\n        setSearchQuery('');  // Clear the search query\n        setMovies([]);  // Clear the movie list\n    };\n\n    // Render app conditionally based on login state and if the user has signed up\n    return (\n        <FavoritesProvider>\n            {!isLoggedIn ? (\n                !isUserSignedUp ? (\n                    <SignUp\n                        onSignUp={() => {\n                            setIsUserSignedUp(true);\n                            setIsLoggedIn(true);\n                        }}\n                    />\n                ) : (\n                    <Login onLogin={() => setIsLoggedIn(true)} />\n                )\n            ) : (\n                <div className=\"app-container\">\n                    <h1>Tamil Movie Recommendations</h1>\n                    <button onClick={() => setIsLoggedIn(false)}>Logout</button>\n\n                    <div className=\"nav-links\">\n                        <button onClick={() => setShowFavorites(false)}>Home</button>\n                        <button onClick={() => setShowFavorites(true)}>Favorites</button>\n                    </div>\n\n                    {!showFavorites ? (\n                        <>\n                            <div className=\"search-bar-container\">\n                                <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n                                <button onClick={clearSearch} className=\"clear-search-button\">Clear Search</button>\n                            </div>\n\n                            <FilterBar genres={selectedGenresList} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n\n                            <MovieList movies={movies} toggleFavorite={toggleFavorite} />\n                        </>\n                    ) : (\n                        <FavoritesPage favorites={favorites} toggleFavorite={toggleFavorite} />\n                    )}\n                </div>\n            )}\n            <button onClick={() => setIsSignUp(!isSignUp)}>\n                {isSignUp ? 'Go to Login' : 'Go to Sign Up'}\n            </button>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,MAAMC,YAAY,GAAG,kCAAkC,CAAC,CAAC;;AAEzD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC2B,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE7D,MAAMiC,kBAAkB,GAAG,CACvB;IAAEC,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAS,CAAC,EAC1B;IAAED,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAS,CAAC,EAC1B;IAAED,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACzB;IAAED,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAS,CAAC,EAC1B;IAAED,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAW,CAAC,EAC5B;IAAED,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACzB;IAAED,EAAE,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAU,CAAC,CACjC;;EAED;EACAlC,SAAS,CAAC,MAAM;IACZ,MAAMmC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,IAAIC,YAAY,GAAG,EAAE;QACrB,IAAIC,UAAU,GAAG,EAAE,CAAC,CAAE;;QAEtB,KAAK,IAAIC,WAAW,GAAG,CAAC,EAAEA,WAAW,IAAID,UAAU,EAAEC,WAAW,EAAE,EAAE;UAChE,IAAIC,QAAQ;UAEZ,IAAInB,WAAW,EAAE;YACb;YACAmB,QAAQ,GAAG,MAAMtC,KAAK,CAACuC,GAAG,CACtB,qDAAqD3B,YAAY,UAAUO,WAAW,mCAAmCkB,WAAW,EACxI,CAAC;UACL,CAAC,MAAM;YACH;YACA,IAAIG,UAAU,GAAGvB,aAAa,GAAG,gBAAgBA,aAAa,EAAE,GAAG,EAAE;YACrEqB,QAAQ,GAAG,MAAMtC,KAAK,CAACuC,GAAG,CACtB,uDAAuD3B,YAAY,GAAG4B,UAAU,mCAAmCH,WAAW,EAClI,CAAC;UACL;;UAEA;UACA,MAAMI,aAAa,GAAGH,QAAQ,CAACI,IAAI,CAACC,OAAO;UAC3C,MAAMC,WAAW,GAAGH,aAAa,CAACI,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,iBAAiB,KAAK,IAAI,CAAC;UACnFZ,YAAY,GAAG,CAAC,GAAGA,YAAY,EAAE,GAAGS,WAAW,CAAC,CAAC,CAAE;;UAEnD;UACA,IAAIN,QAAQ,CAACI,IAAI,CAACM,WAAW,IAAIX,WAAW,EAAE;YAC1C;UACJ;QACJ;;QAEA;QACArB,SAAS,CAACmB,YAAY,CAAC;MAE3B,CAAC,CAAC,OAAOc,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDf,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACjB,aAAa,EAAEE,WAAW,CAAC,CAAC;;EAEhC;EACA,MAAMgC,cAAc,GAAIL,KAAK,IAAK;IAC9B,IAAIzB,SAAS,CAAC+B,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACrB,EAAE,KAAKc,KAAK,CAACd,EAAE,CAAC,EAAE;MACtDV,YAAY,CAACD,SAAS,CAACwB,MAAM,CAACS,GAAG,IAAIA,GAAG,CAACtB,EAAE,KAAKc,KAAK,CAACd,EAAE,CAAC,CAAC;IAC9D,CAAC,MAAM;MACHV,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEyB,KAAK,CAAC,CAAC;IACvC;EACJ,CAAC;;EAED;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACtBnC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAE;IACrBJ,SAAS,CAAC,EAAE,CAAC,CAAC,CAAE;EACpB,CAAC;;EAED;EACA,oBACIP,OAAA,CAACJ,iBAAiB;IAAAmD,QAAA,GACb,CAAC/B,UAAU,GACR,CAACI,cAAc,gBACXpB,OAAA,CAACF,MAAM;MACHkD,QAAQ,EAAEA,CAAA,KAAM;QACZ3B,iBAAiB,CAAC,IAAI,CAAC;QACvBJ,aAAa,CAAC,IAAI,CAAC;MACvB;IAAE;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAEFpD,OAAA,CAACH,KAAK;MAACwD,OAAO,EAAEA,CAAA,KAAMpC,aAAa,CAAC,IAAI;IAAE;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC/C,gBAEDpD,OAAA;MAAKsD,SAAS,EAAC,eAAe;MAAAP,QAAA,gBAC1B/C,OAAA;QAAA+C,QAAA,EAAI;MAA2B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpCpD,OAAA;QAAQuD,OAAO,EAAEA,CAAA,KAAMtC,aAAa,CAAC,KAAK,CAAE;QAAA8B,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAE5DpD,OAAA;QAAKsD,SAAS,EAAC,WAAW;QAAAP,QAAA,gBACtB/C,OAAA;UAAQuD,OAAO,EAAEA,CAAA,KAAMxC,gBAAgB,CAAC,KAAK,CAAE;UAAAgC,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC7DpD,OAAA;UAAQuD,OAAO,EAAEA,CAAA,KAAMxC,gBAAgB,CAAC,IAAI,CAAE;UAAAgC,QAAA,EAAC;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC,EAEL,CAACtC,aAAa,gBACXd,OAAA,CAAAE,SAAA;QAAA6C,QAAA,gBACI/C,OAAA;UAAKsD,SAAS,EAAC,sBAAsB;UAAAP,QAAA,gBACjC/C,OAAA,CAACN,SAAS;YAACgB,WAAW,EAAEA,WAAY;YAACC,cAAc,EAAEA;UAAe;YAAAsC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvEpD,OAAA;YAAQuD,OAAO,EAAET,WAAY;YAACQ,SAAS,EAAC,qBAAqB;YAAAP,QAAA,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClF,CAAC,eAENpD,OAAA,CAACP,SAAS;UAAC+D,MAAM,EAAElC,kBAAmB;UAACd,aAAa,EAAEA,aAAc;UAACC,gBAAgB,EAAEA;QAAiB;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAE3GpD,OAAA,CAACR,SAAS;UAACc,MAAM,EAAEA,MAAO;UAACoC,cAAc,EAAEA;QAAe;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,eAC/D,CAAC,gBAEHpD,OAAA,CAACL,aAAa;QAACiB,SAAS,EAAEA,SAAU;QAAC8B,cAAc,EAAEA;MAAe;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACzE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACR,eACDpD,OAAA;MAAQuD,OAAO,EAAEA,CAAA,KAAMpC,WAAW,CAAC,CAACD,QAAQ,CAAE;MAAA6B,QAAA,EACzC7B,QAAQ,GAAG,aAAa,GAAG;IAAe;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAE5B,CAAC;AAAC/C,EAAA,CA7HID,GAAG;AAAAqD,EAAA,GAAHrD,GAAG;AA+HT,eAAeA,GAAG;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}