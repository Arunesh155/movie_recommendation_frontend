{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext'; // Provider for managing favorites\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [favorites, setFavorites] = useState([]); // State to store favorites\n  const [showFavorites, setShowFavorites] = useState(false); // State to toggle favorites view\n\n  // List of selected genres for filtering\n  const selectedGenresList = ['Comedy', 'Romance', 'Horror', 'Crime', 'Thriller'];\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=ta`);\n        // Filter genres to only include specific ones\n        setGenres(response.data.genres.filter(genre => selectedGenresList.includes(genre.name)));\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch all movies once when the component loads and when the genre changes\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta${genreParam}`);\n        setMovies(response.data.results);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies(); // Fetch movies based on current genre selection\n  }, [selectedGenre]); // Only refetch when selectedGenre changes\n\n  // Search functionality (updates on input change)\n  useEffect(() => {\n    if (searchQuery.trim() === '') {\n      // If search query is cleared, refetch based on genre filter\n      const fetchMovies = async () => {\n        try {\n          let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n          const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta${genreParam}`);\n          setMovies(response.data.results);\n        } catch (error) {\n          console.error('Error fetching movies:', error);\n        }\n      };\n      fetchMovies();\n    } else {\n      // If search query is not empty, search for the movies based on query\n      const fetchSearchResults = async () => {\n        try {\n          const response = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&language=ta`);\n          setMovies(response.data.results.filter(movie => movie.original_language === 'ta'));\n        } catch (error) {\n          console.error('Error fetching search results:', error);\n        }\n      };\n      fetchSearchResults();\n    }\n  }, [searchQuery]); // Re-run whenever searchQuery changes\n\n  // Function to toggle a movie as a favorite\n  const toggleFavorite = movie => {\n    if (favorites.some(favorite => favorite.id === movie.id)) {\n      setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove from favorites\n    } else {\n      setFavorites([...favorites, movie]); // Add to favorites\n    }\n  };\n\n  // Clear search query function\n  const clearSearch = () => {\n    setSearchQuery(''); // Clear the search input\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tamil Movie Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-links\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(false),\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(true),\n          children: \"Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), !showFavorites ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar-container\",\n          children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n            searchQuery: searchQuery,\n            setSearchQuery: setSearchQuery\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSearch,\n            className: \"clear-search-button\",\n            children: \"Clear Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n          genres: genres,\n          selectedGenre: selectedGenre,\n          setSelectedGenre: setSelectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: movies,\n          toggleFavorite: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(FavoritesPage, {\n        favorites: favorites,\n        toggleFavorite: toggleFavorite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"V73fLQuE21w49MUKGBHL0wKClTk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","FavoritesPage","FavoritesProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","favorites","setFavorites","showFavorites","setShowFavorites","selectedGenresList","fetchGenres","response","get","data","filter","genre","includes","name","error","console","fetchMovies","genreParam","results","trim","fetchSearchResults","movie","original_language","toggleFavorite","some","favorite","id","fav","clearSearch","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext'; // Provider for managing favorites\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [favorites, setFavorites] = useState([]); // State to store favorites\n    const [showFavorites, setShowFavorites] = useState(false); // State to toggle favorites view\n\n    // List of selected genres for filtering\n    const selectedGenresList = ['Comedy', 'Romance', 'Horror', 'Crime', 'Thriller'];\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=ta`\n                );\n                // Filter genres to only include specific ones\n                setGenres(response.data.genres.filter(genre =>\n                    selectedGenresList.includes(genre.name)\n                ));\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch all movies once when the component loads and when the genre changes\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta${genreParam}`\n                );\n\n                setMovies(response.data.results);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies(); // Fetch movies based on current genre selection\n    }, [selectedGenre]); // Only refetch when selectedGenre changes\n\n    // Search functionality (updates on input change)\n    useEffect(() => {\n        if (searchQuery.trim() === '') {\n            // If search query is cleared, refetch based on genre filter\n            const fetchMovies = async () => {\n                try {\n                    let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n\n                    const response = await axios.get(\n                        `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta${genreParam}`\n                    );\n                    setMovies(response.data.results);\n                } catch (error) {\n                    console.error('Error fetching movies:', error);\n                }\n            };\n            fetchMovies();\n        } else {\n            // If search query is not empty, search for the movies based on query\n            const fetchSearchResults = async () => {\n                try {\n                    const response = await axios.get(\n                        `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&language=ta`\n                    );\n                    setMovies(response.data.results.filter(movie => movie.original_language === 'ta'));\n                } catch (error) {\n                    console.error('Error fetching search results:', error);\n                }\n            };\n            fetchSearchResults();\n        }\n    }, [searchQuery]); // Re-run whenever searchQuery changes\n\n    // Function to toggle a movie as a favorite\n    const toggleFavorite = (movie) => {\n        if (favorites.some(favorite => favorite.id === movie.id)) {\n            setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove from favorites\n        } else {\n            setFavorites([...favorites, movie]); // Add to favorites\n        }\n    };\n\n    // Clear search query function\n    const clearSearch = () => {\n        setSearchQuery(''); // Clear the search input\n    };\n\n    return (\n        <FavoritesProvider>\n            <div className=\"app-container\">\n                <h1>Tamil Movie Recommendations</h1>\n\n                {/* Navigation Links */}\n                <div className=\"nav-links\">\n                    <button onClick={() => setShowFavorites(false)}>Home</button>\n                    <button onClick={() => setShowFavorites(true)}>Favorites</button>\n                </div>\n\n                {/* Conditional Rendering based on showFavorites state */}\n                {!showFavorites ? (\n                    <>\n                        {/* Search bar for searching movies */}\n                        <div className=\"search-bar-container\">\n                            <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n                            {/* Clear Search Button */}\n                            <button onClick={clearSearch} className=\"clear-search-button\">Clear Search</button>\n                        </div>\n\n                        {/* Filter bar for filtering by genre */}\n                        <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n\n                        {/* List of movies with option to add to favorites */}\n                        <MovieList movies={movies} toggleFavorite={toggleFavorite} />\n                    </>\n                ) : (\n                    <FavoritesPage favorites={favorites} toggleFavorite={toggleFavorite} />\n                )}\n            </div>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}