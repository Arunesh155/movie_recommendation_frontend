{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [favorites, setFavorites] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null); // For enlarging movie details\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        setGenres(response.data.genres.filter(genre => ['Comedy', 'Horror', 'Romance', 'Crime', 'Action', 'Drama', 'Thriller'].includes(genre.name)));\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch movies whenever selectedGenre, searchQuery, or page changes\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n        const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`);\n        setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n        setTotalPages(response.data.total_pages);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre, searchQuery, page]);\n\n  // Infinite scroll functionality\n  useEffect(() => {\n    const handleScroll = () => {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = document.documentElement;\n      if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n        setPage(prevPage => prevPage + 1);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [page, totalPages]);\n\n  // Filtered movies based on search query\n  const filteredMovies = movies.filter(movie => movie.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  const handleFavoriteClick = movie => {\n    setFavorites(prevFavorites => {\n      if (prevFavorites.includes(movie)) {\n        return prevFavorites.filter(fav => fav !== movie);\n      }\n      return [...prevFavorites, movie];\n    });\n  };\n  const handleMovieClick = movie => {\n    setSelectedMovie(movie);\n  };\n  const handleCloseModal = () => {\n    setSelectedMovie(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tamil Movie Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery,\n      onSearch: () => setPage(1) // Reset to first page on search\n      ,\n      onClear: () => setSearchQuery('')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: filteredMovies,\n      onFavoriteClick: handleFavoriteClick,\n      onMovieClick: handleMovieClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), selectedMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: handleCloseModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedMovie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w500${selectedMovie.poster_path}`,\n          alt: selectedMovie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedMovie.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"EXfunkazvZBcLMXbj5Vx9k02VEY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","jsxDEV","_jsxDEV","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","favorites","setFavorites","selectedMovie","setSelectedMovie","fetchGenres","response","get","data","filter","genre","includes","name","error","console","fetchMovies","genreParam","searchParam","prevMovies","results","total_pages","handleScroll","scrollTop","scrollHeight","clientHeight","document","documentElement","prevPage","window","addEventListener","removeEventListener","filteredMovies","movie","title","toLowerCase","handleFavoriteClick","prevFavorites","fav","handleMovieClick","handleCloseModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onClear","onFavoriteClick","onMovieClick","onClick","src","poster_path","alt","overview","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [favorites, setFavorites] = useState([]);\n    const [selectedMovie, setSelectedMovie] = useState(null); // For enlarging movie details\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                setGenres(response.data.genres.filter(genre =>\n                    ['Comedy', 'Horror', 'Romance', 'Crime', 'Action', 'Drama', 'Thriller'].includes(genre.name)\n                ));\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch movies whenever selectedGenre, searchQuery, or page changes\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`\n                );\n\n                setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n                setTotalPages(response.data.total_pages);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies();\n    }, [selectedGenre, searchQuery, page]);\n\n    // Infinite scroll functionality\n    useEffect(() => {\n        const handleScroll = () => {\n            const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n            if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n                setPage(prevPage => prevPage + 1);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [page, totalPages]);\n\n    // Filtered movies based on search query\n    const filteredMovies = movies.filter(movie =>\n        movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    const handleFavoriteClick = (movie) => {\n        setFavorites(prevFavorites => {\n            if (prevFavorites.includes(movie)) {\n                return prevFavorites.filter(fav => fav !== movie);\n            }\n            return [...prevFavorites, movie];\n        });\n    };\n\n    const handleMovieClick = (movie) => {\n        setSelectedMovie(movie);\n    };\n\n    const handleCloseModal = () => {\n        setSelectedMovie(null);\n    };\n\n    return (\n        <div className=\"app-container\">\n            <h1>Tamil Movie Recommendations</h1>\n            <SearchBar \n                searchQuery={searchQuery} \n                setSearchQuery={setSearchQuery} \n                onSearch={() => setPage(1)} // Reset to first page on search\n                onClear={() => setSearchQuery('')} \n            />\n            <FilterBar \n                genres={genres} \n                selectedGenre={selectedGenre} \n                setSelectedGenre={setSelectedGenre} \n            />\n            <MovieList \n                movies={filteredMovies} \n                onFavoriteClick={handleFavoriteClick} \n                onMovieClick={handleMovieClick} \n            />\n\n            {/* Modal for movie details */}\n            {selectedMovie && (\n                <div className=\"modal\">\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n                        <h2>{selectedMovie.title}</h2>\n                        <img src={`https://image.tmdb.org/t/p/w500${selectedMovie.poster_path}`} alt={selectedMovie.title} />\n                        <p>{selectedMovie.overview}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}