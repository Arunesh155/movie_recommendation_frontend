{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList'; // Ensure you have this component\nimport SearchBar from './components/SearchBar'; // Ensure you have this component\nimport FilterBar from './components/FilterBar'; // Ensure you have this component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n\n  // Directly using the API key (for testing purposes)\n  const TMDB_API_KEY = 'your_api_key_here'; // Replace this with your actual API key\n\n  // Function to fetch Tamil movies\n  const fetchMovies = async () => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&language=ta`);\n      console.log(\"API Response:\", response);\n      console.log(\"Movie Results:\", response.data.results);\n      if (response.data.results.length > 0) {\n        setMovies(response.data.results);\n      } else {\n        console.log(\"No movies found.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching Tamil movies:\", error.response ? error.response.data : error.message);\n    }\n  };\n\n  // Function to fetch genres\n  const fetchGenres = async () => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n      setGenres(response.data.genres);\n    } catch (error) {\n      console.error(\"Error fetching genres:\", error);\n    }\n  };\n\n  // useEffect to fetch movies and genres on component mount\n  useEffect(() => {\n    fetchMovies(); // Call to fetch Tamil movies\n    fetchGenres(); // Call to fetch movie genres\n  }, []); // Empty dependency array to run only on mount\n\n  // Filter movies based on search query and selected genre\n  const filteredMovies = movies.filter(movie => {\n    const matchesSearch = movie.title.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesGenre = selectedGenre ? movie.genre_ids.includes(parseInt(selectedGenre)) : true;\n    return matchesSearch && matchesGenre;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tamil Movie Recommendation App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: filteredMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"2TNQsTWWikRGZDm6pLxtSTkA+Ag=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","MovieList","SearchBar","FilterBar","jsxDEV","_jsxDEV","App","_s","movies","setMovies","searchQuery","setSearchQuery","genres","setGenres","selectedGenre","setSelectedGenre","TMDB_API_KEY","fetchMovies","response","get","console","log","data","results","length","error","message","fetchGenres","filteredMovies","filter","movie","matchesSearch","title","toLowerCase","includes","matchesGenre","genre_ids","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList'; // Ensure you have this component\nimport SearchBar from './components/SearchBar'; // Ensure you have this component\nimport FilterBar from './components/FilterBar'; // Ensure you have this component\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n\n    // Directly using the API key (for testing purposes)\n    const TMDB_API_KEY = 'your_api_key_here'; // Replace this with your actual API key\n\n    // Function to fetch Tamil movies\n    const fetchMovies = async () => {\n        try {\n            const response = await axios.get(\n                `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&language=ta`\n            );\n            console.log(\"API Response:\", response);\n            console.log(\"Movie Results:\", response.data.results);\n\n            if (response.data.results.length > 0) {\n                setMovies(response.data.results);\n            } else {\n                console.log(\"No movies found.\");\n            }\n        } catch (error) {\n            console.error(\"Error fetching Tamil movies:\", error.response ? error.response.data : error.message);\n        }\n    };\n\n    // Function to fetch genres\n    const fetchGenres = async () => {\n        try {\n            const response = await axios.get(\n                `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n            );\n            setGenres(response.data.genres);\n        } catch (error) {\n            console.error(\"Error fetching genres:\", error);\n        }\n    };\n\n    // useEffect to fetch movies and genres on component mount\n    useEffect(() => {\n        fetchMovies();  // Call to fetch Tamil movies\n        fetchGenres();  // Call to fetch movie genres\n    }, []); // Empty dependency array to run only on mount\n\n    // Filter movies based on search query and selected genre\n    const filteredMovies = movies.filter(movie => {\n        const matchesSearch = movie.title.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesGenre = selectedGenre ? movie.genre_ids.includes(parseInt(selectedGenre)) : true;\n        return matchesSearch && matchesGenre;\n    });\n\n    return (\n        <div className=\"App\">\n            <h1>Tamil Movie Recommendation App</h1>\n            <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n            <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n            <MovieList movies={filteredMovies} />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}