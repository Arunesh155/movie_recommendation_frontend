{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport SearchBar from './components/SearchBar';\nimport FilterBar from './components/FilterBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [page, setPage] = useState(1); // Track the current page\n  const [totalPages, setTotalPages] = useState(1); // Track the total number of pages\n\n  // Hard-coding the API key (replace with your actual API key)\n  const TMDB_API_KEY = 'bb3b8db0f7a16f48b437de6224ba5881';\n\n  // Function to fetch movies with pagination\n  const fetchMovies = async (pageNum = 1) => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${pageNum}`);\n      setMovies(prevMovies => [...prevMovies, ...response.data.results]);\n      setTotalPages(response.data.total_pages);\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n    }\n  };\n\n  // Function to fetch genres\n  const fetchGenres = async () => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=ta`);\n      setGenres(response.data.genres);\n    } catch (error) {\n      console.error(\"Error fetching genres:\", error);\n    }\n  };\n\n  // Load more movies when page changes\n  const loadMoreMovies = () => {\n    if (page < totalPages) {\n      setPage(prevPage => prevPage + 1);\n    }\n  };\n\n  // Fetch movies and genres when the component mounts\n  useEffect(() => {\n    fetchMovies(page); // Fetch movies for the current page\n  }, [page]); // Fetch movies whenever the page changes\n\n  useEffect(() => {\n    fetchGenres();\n  }, []);\n\n  // Function to handle search query changes\n  const handleSearchChange = query => {\n    console.log(\"Search Query:\", query); // Check if query is being updated\n    setSearchQuery(query);\n  };\n\n  // Filter movies based on search query and selected genre\n  const filteredMovies = movies.filter(movie => {\n    // Ensure movie.title is defined before accessing\n    const matchesSearch = movie.title ? movie.title.toLowerCase().includes(searchQuery.toLowerCase()) : false;\n    const matchesGenre = selectedGenre ? movie.genre_ids && movie.genre_ids.includes(parseInt(selectedGenre)) : true;\n    console.log(\"Movie Title:\", movie.title, \" | Matches Search:\", matchesSearch, \" | Matches Genre:\", matchesGenre);\n    return matchesSearch && matchesGenre; // Movie should match both search and genre filters\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tamil Movie Recommendation App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: filteredMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), page < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMoreMovies,\n      children: \"Load More Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"aJ6V6NOhnz18rPQnTuCTrz0pEIk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","MovieList","SearchBar","FilterBar","jsxDEV","_jsxDEV","App","_s","movies","setMovies","searchQuery","setSearchQuery","genres","setGenres","selectedGenre","setSelectedGenre","page","setPage","totalPages","setTotalPages","TMDB_API_KEY","fetchMovies","pageNum","response","get","prevMovies","data","results","total_pages","error","console","fetchGenres","loadMoreMovies","prevPage","handleSearchChange","query","log","filteredMovies","filter","movie","matchesSearch","title","toLowerCase","includes","matchesGenre","genre_ids","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport SearchBar from './components/SearchBar';\nimport FilterBar from './components/FilterBar';\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [page, setPage] = useState(1); // Track the current page\n    const [totalPages, setTotalPages] = useState(1); // Track the total number of pages\n\n    // Hard-coding the API key (replace with your actual API key)\n    const TMDB_API_KEY = 'bb3b8db0f7a16f48b437de6224ba5881';\n\n    // Function to fetch movies with pagination\n    const fetchMovies = async (pageNum = 1) => {\n        try {\n            const response = await axios.get(\n                `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${pageNum}`\n            );\n            setMovies(prevMovies => [...prevMovies, ...response.data.results]);\n            setTotalPages(response.data.total_pages);\n        } catch (error) {\n            console.error(\"Error fetching movies:\", error);\n        }\n    };\n\n    // Function to fetch genres\n    const fetchGenres = async () => {\n        try {\n            const response = await axios.get(\n                `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=ta`\n            );\n            setGenres(response.data.genres);\n        } catch (error) {\n            console.error(\"Error fetching genres:\", error);\n        }\n    };\n\n    // Load more movies when page changes\n    const loadMoreMovies = () => {\n        if (page < totalPages) {\n            setPage(prevPage => prevPage + 1);\n        }\n    };\n\n    // Fetch movies and genres when the component mounts\n    useEffect(() => {\n        fetchMovies(page); // Fetch movies for the current page\n    }, [page]); // Fetch movies whenever the page changes\n\n    useEffect(() => {\n        fetchGenres();\n    }, []);\n\n    // Function to handle search query changes\n    const handleSearchChange = (query) => {\n        console.log(\"Search Query:\", query); // Check if query is being updated\n        setSearchQuery(query);\n    };\n\n    // Filter movies based on search query and selected genre\n    const filteredMovies = movies.filter(movie => {\n        // Ensure movie.title is defined before accessing\n        const matchesSearch = movie.title \n            ? movie.title.toLowerCase().includes(searchQuery.toLowerCase()) \n            : false;\n\n        const matchesGenre = selectedGenre \n            ? movie.genre_ids && movie.genre_ids.includes(parseInt(selectedGenre)) \n            : true;\n\n        console.log(\"Movie Title:\", movie.title, \" | Matches Search:\", matchesSearch, \" | Matches Genre:\", matchesGenre);\n\n        return matchesSearch && matchesGenre; // Movie should match both search and genre filters\n    });\n\n    return (\n        <div className=\"App\">\n            <h1>Tamil Movie Recommendation App</h1>\n            <SearchBar searchQuery={searchQuery} setSearchQuery={handleSearchChange} />\n            <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n            <MovieList movies={filteredMovies} />\n            {page < totalPages && (\n                <button onClick={loadMoreMovies}>Load More Movies</button>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}