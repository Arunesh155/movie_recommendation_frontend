{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = 'YOUR_API_KEY'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  useEffect(() => {\n    fetchGenres();\n  }, []);\n  useEffect(() => {\n    // Fetch movies when selectedGenre changes\n    fetchMovies(1); // Reset to page 1 when filtering by genre\n  }, [selectedGenre]);\n  const fetchMovies = async (pageNum = 1) => {\n    try {\n      let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n      let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n      const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}${genreParam}&page=${pageNum}${searchParam}`);\n      setMovies(response.data.results);\n      setTotalPages(response.data.total_pages);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  const fetchGenres = async () => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n      // Filter genres to include only specific ones like Comedy, Crime, Horror\n      setGenres(response.data.genres.filter(genre => ['Comedy', 'Crime', 'Horror'].includes(genre.name)));\n    } catch (error) {\n      console.error('Error fetching genres:', error);\n    }\n  };\n  const filteredMovies = movies.filter(movie => movie.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tamil Movie Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: filteredMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), page < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fetchMovies(page + 1),\n      children: \"Load More Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"SOWhmo/lIMjedn4OOBl2c8mu++k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","jsxDEV","_jsxDEV","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","fetchGenres","fetchMovies","pageNum","genreParam","searchParam","response","get","data","results","total_pages","error","console","filter","genre","includes","name","filteredMovies","movie","title","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = 'YOUR_API_KEY'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n\n    useEffect(() => {\n        fetchGenres();\n    }, []);\n\n    useEffect(() => {\n        // Fetch movies when selectedGenre changes\n        fetchMovies(1); // Reset to page 1 when filtering by genre\n    }, [selectedGenre]);\n\n    const fetchMovies = async (pageNum = 1) => {\n        try {\n            let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n            let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n            const response = await axios.get(\n                `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}${genreParam}&page=${pageNum}${searchParam}`\n            );\n            setMovies(response.data.results);\n            setTotalPages(response.data.total_pages);\n        } catch (error) {\n            console.error('Error fetching movies:', error);\n        }\n    };\n\n    const fetchGenres = async () => {\n        try {\n            const response = await axios.get(\n                `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n            );\n            // Filter genres to include only specific ones like Comedy, Crime, Horror\n            setGenres(response.data.genres.filter(genre =>\n                ['Comedy', 'Crime', 'Horror'].includes(genre.name)\n            ));\n        } catch (error) {\n            console.error('Error fetching genres:', error);\n        }\n    };\n\n    const filteredMovies = movies.filter(movie =>\n        movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <div className=\"app-container\">\n            <h1>Tamil Movie Recommendations</h1>\n            <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n            <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n            <MovieList movies={filteredMovies} />\n            {page < totalPages && <button onClick={() => fetchMovies(page + 1)}>Load More Movies</button>}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}