{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [favorites, setFavorites] = useState([]);\n  const [showFavorites, setShowFavorites] = useState(false);\n  const [page, setPage] = useState(1); // State to manage current page\n  const [hasMoreMovies, setHasMoreMovies] = useState(true); // State to track if more movies are available\n\n  // Genres to display as filter options\n  const selectedGenresList = [{\n    id: 28,\n    name: 'Action'\n  }, {\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 27,\n    name: 'Horror'\n  }, {\n    id: 53,\n    name: 'Thriller'\n  }, {\n    id: 80,\n    name: 'Crime'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }];\n\n  // Fetch movies based on genre, search query, or page\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        let response;\n        if (searchQuery) {\n          // Use the search endpoint if there's a search query\n          response = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&with_original_language=ta&page=${page}`);\n        } else {\n          // Use the discover endpoint for genre filtering and pagination\n          let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n          response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}${genreParam}&with_original_language=ta&page=${page}`);\n        }\n        const newMovies = response.data.results;\n        console.log('Fetched Movies:', newMovies); // Log fetched movies\n\n        // Filter out movies that are not in Tamil\n        const tamilMovies = newMovies.filter(movie => movie.original_language === 'ta');\n        console.log('Tamil Movies:', tamilMovies); // Log filtered Tamil movies\n\n        // Append new Tamil movies to the existing list\n        setMovies(prevMovies => [...prevMovies, ...tamilMovies]);\n\n        // Check if there are more movies to load\n        if (tamilMovies.length === 0) {\n          setHasMoreMovies(false); // No more movies available\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre, searchQuery, page]);\n\n  // Function to load more movies when the button is clicked\n  const loadMoreMovies = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  // Function to toggle a movie as a favorite\n  const toggleFavorite = movie => {\n    if (favorites.some(favorite => favorite.id === movie.id)) {\n      setFavorites(favorites.filter(fav => fav.id !== movie.id));\n    } else {\n      setFavorites([...favorites, movie]);\n    }\n  };\n\n  // Clear search query function\n  const clearSearch = () => {\n    setSearchQuery('');\n    setPage(1); // Reset to the first page when search is cleared\n    setMovies([]); // Clear previous movie list\n    setHasMoreMovies(true); // Reset to allow loading more movies\n  };\n\n  // Reset movies when changing genre or search query\n  useEffect(() => {\n    setMovies([]); // Clear the movie list before fetching new results\n    setPage(1); // Reset to the first page\n    setHasMoreMovies(true); // Reset for more movies\n  }, [selectedGenre, searchQuery]);\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tamil Movie Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-links\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(false),\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFavorites(true),\n          children: \"Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), !showFavorites ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar-container\",\n          children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n            searchQuery: searchQuery,\n            setSearchQuery: setSearchQuery\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSearch,\n            className: \"clear-search-button\",\n            children: \"Clear Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n          genres: selectedGenresList,\n          selectedGenre: selectedGenre,\n          setSelectedGenre: setSelectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: movies,\n          toggleFavorite: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), hasMoreMovies && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadMoreMovies,\n          className: \"load-more-button\",\n          children: \"Load More Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(FavoritesPage, {\n        favorites: favorites,\n        toggleFavorite: toggleFavorite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"39vqIptJnZZ8x/efUDxgphzQ7wQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","FilterBar","SearchBar","FavoritesPage","FavoritesProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","TMDB_API_KEY","App","_s","movies","setMovies","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","favorites","setFavorites","showFavorites","setShowFavorites","page","setPage","hasMoreMovies","setHasMoreMovies","selectedGenresList","id","name","fetchMovies","response","get","genreParam","newMovies","data","results","console","log","tamilMovies","filter","movie","original_language","prevMovies","length","error","loadMoreMovies","prevPage","toggleFavorite","some","favorite","fav","clearSearch","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","genres","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext';\nimport './App.css';\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [favorites, setFavorites] = useState([]);\n    const [showFavorites, setShowFavorites] = useState(false);\n    const [page, setPage] = useState(1); // State to manage current page\n    const [hasMoreMovies, setHasMoreMovies] = useState(true); // State to track if more movies are available\n\n    // Genres to display as filter options\n    const selectedGenresList = [\n        { id: 28, name: 'Action' },\n        { id: 35, name: 'Comedy' },\n        { id: 18, name: 'Drama' },\n        { id: 27, name: 'Horror' },\n        { id: 53, name: 'Thriller' },\n        { id: 80, name: 'Crime' },\n        { id: 10749, name: 'Romance' },\n    ];\n\n    // Fetch movies based on genre, search query, or page\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                let response;\n\n                if (searchQuery) {\n                    // Use the search endpoint if there's a search query\n                    response = await axios.get(\n                        `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${searchQuery}&with_original_language=ta&page=${page}`\n                    );\n                } else {\n                    // Use the discover endpoint for genre filtering and pagination\n                    let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                    response = await axios.get(\n                        `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}${genreParam}&with_original_language=ta&page=${page}`\n                    );\n                }\n\n                const newMovies = response.data.results;\n                console.log('Fetched Movies:', newMovies); // Log fetched movies\n\n                // Filter out movies that are not in Tamil\n                const tamilMovies = newMovies.filter(movie => movie.original_language === 'ta');\n                console.log('Tamil Movies:', tamilMovies); // Log filtered Tamil movies\n\n                // Append new Tamil movies to the existing list\n                setMovies((prevMovies) => [...prevMovies, ...tamilMovies]);\n\n                // Check if there are more movies to load\n                if (tamilMovies.length === 0) {\n                    setHasMoreMovies(false); // No more movies available\n                }\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies();\n    }, [selectedGenre, searchQuery, page]);\n\n    // Function to load more movies when the button is clicked\n    const loadMoreMovies = () => {\n        setPage((prevPage) => prevPage + 1);\n    };\n\n    // Function to toggle a movie as a favorite\n    const toggleFavorite = (movie) => {\n        if (favorites.some(favorite => favorite.id === movie.id)) {\n            setFavorites(favorites.filter(fav => fav.id !== movie.id));\n        } else {\n            setFavorites([...favorites, movie]);\n        }\n    };\n\n    // Clear search query function\n    const clearSearch = () => {\n        setSearchQuery('');\n        setPage(1);  // Reset to the first page when search is cleared\n        setMovies([]); // Clear previous movie list\n        setHasMoreMovies(true); // Reset to allow loading more movies\n    };\n\n    // Reset movies when changing genre or search query\n    useEffect(() => {\n        setMovies([]); // Clear the movie list before fetching new results\n        setPage(1);  // Reset to the first page\n        setHasMoreMovies(true); // Reset for more movies\n    }, [selectedGenre, searchQuery]);\n\n    return (\n        <FavoritesProvider>\n            <div className=\"app-container\">\n                <h1>Tamil Movie Recommendations</h1>\n\n                {/* Navigation Links */}\n                <div className=\"nav-links\">\n                    <button onClick={() => setShowFavorites(false)}>Home</button>\n                    <button onClick={() => setShowFavorites(true)}>Favorites</button>\n                </div>\n\n                {/* Conditional Rendering based on showFavorites state */}\n                {!showFavorites ? (\n                    <>\n                        {/* Search bar for searching movies */}\n                        <div className=\"search-bar-container\">\n                            <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n                            {/* Clear Search Button */}\n                            <button onClick={clearSearch} className=\"clear-search-button\">Clear Search</button>\n                        </div>\n\n                        {/* Filter bar for filtering by genre */}\n                        <FilterBar genres={selectedGenresList} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n\n                        {/* List of movies with option to add to favorites */}\n                        <MovieList movies={movies} toggleFavorite={toggleFavorite} />\n\n                        {/* Load More Button */}\n                        {hasMoreMovies && (\n                            <button onClick={loadMoreMovies} className=\"load-more-button\">Load More Movies</button>\n                        )}\n                    </>\n                ) : (\n                    <FavoritesPage favorites={favorites} toggleFavorite={toggleFavorite} />\n                )}\n            </div>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}