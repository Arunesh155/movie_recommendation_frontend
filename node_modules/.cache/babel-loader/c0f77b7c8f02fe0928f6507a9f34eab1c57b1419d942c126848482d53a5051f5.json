{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Full Stack\\\\movie\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext'; // Provider for managing favorites\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [favorites, setFavorites] = useState([]); // State to store favorites\n\n  // Fetch genres once when the component loads\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);\n        // Filter to include only specific genres like Comedy, Crime, Horror\n        setGenres(response.data.genres.filter(genre => ['Comedy', 'Crime', 'Horror'].includes(genre.name)));\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch movies whenever selectedGenre, searchQuery, or page changes\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        // Build API query based on selected genre and search query\n        let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n        let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n        const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`);\n\n        // If page is 1, replace the movies; otherwise, append to the existing list\n        setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n        setTotalPages(response.data.total_pages);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies(); // Call the function to fetch movies based on current state\n  }, [selectedGenre, searchQuery, page]); // Re-run whenever these dependencies change\n\n  // Infinite scroll functionality\n  useEffect(() => {\n    const handleScroll = () => {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = document.documentElement;\n      if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n        setPage(prevPage => prevPage + 1);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [page, totalPages]);\n\n  // Function to add or remove a movie from favorites\n  const toggleFavorite = movie => {\n    if (favorites.some(favorite => favorite.id === movie.id)) {\n      setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove if already a favorite\n    } else {\n      setFavorites([...favorites, movie]); // Add to favorites\n    }\n  };\n\n  // Filtered movies based on search query\n  const filteredMovies = movies.filter(movie => movie.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(FavoritesProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tamil Movie Recommendations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/favorites\",\n            children: \"Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n          searchQuery: searchQuery,\n          setSearchQuery: setSearchQuery\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n          genres: genres,\n          selectedGenre: selectedGenre,\n          setSelectedGenre: setSelectedGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(MovieList, {\n              movies: filteredMovies,\n              toggleFavorite: toggleFavorite\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/favorites\",\n            element: /*#__PURE__*/_jsxDEV(FavoritesPage, {\n              favorites: favorites,\n              toggleFavorite: toggleFavorite\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 59\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"woQ+yxunhobziTvUHF5MatClOMQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","BrowserRouter","Router","Route","Routes","Link","MovieList","FilterBar","SearchBar","FavoritesPage","FavoritesProvider","jsxDEV","_jsxDEV","TMDB_API_KEY","App","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","searchQuery","setSearchQuery","page","setPage","totalPages","setTotalPages","favorites","setFavorites","fetchGenres","response","get","data","filter","genre","includes","name","error","console","fetchMovies","genreParam","searchParam","prevMovies","results","total_pages","handleScroll","scrollTop","scrollHeight","clientHeight","document","documentElement","prevPage","window","addEventListener","removeEventListener","toggleFavorite","movie","some","favorite","id","fav","filteredMovies","title","toLowerCase","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","path","element","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Full Stack/movie/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport MovieList from './components/MovieList';\nimport FilterBar from './components/FilterBar';\nimport SearchBar from './components/SearchBar';\nimport FavoritesPage from './components/FavoritesPage';\nimport { FavoritesProvider } from './FavoritesContext'; // Provider for managing favorites\nimport './App.css'; // Import the CSS file\n\nconst TMDB_API_KEY = '82bf8e7015e539b6b3839975fa59392a'; // Replace with your TMDB API Key\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [page, setPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [favorites, setFavorites] = useState([]); // State to store favorites\n\n    // Fetch genres once when the component loads\n    useEffect(() => {\n        const fetchGenres = async () => {\n            try {\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n                );\n                // Filter to include only specific genres like Comedy, Crime, Horror\n                setGenres(response.data.genres.filter(genre =>\n                    ['Comedy', 'Crime', 'Horror'].includes(genre.name)\n                ));\n            } catch (error) {\n                console.error('Error fetching genres:', error);\n            }\n        };\n        fetchGenres();\n    }, []);\n\n    // Fetch movies whenever selectedGenre, searchQuery, or page changes\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                // Build API query based on selected genre and search query\n                let genreParam = selectedGenre ? `&with_genres=${selectedGenre}` : '';\n                let searchParam = searchQuery ? `&query=${searchQuery}` : '';\n\n                const response = await axios.get(\n                    `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&with_original_language=ta&page=${page}${genreParam}${searchParam}`\n                );\n\n                // If page is 1, replace the movies; otherwise, append to the existing list\n                setMovies(prevMovies => page === 1 ? response.data.results : [...prevMovies, ...response.data.results]);\n\n                setTotalPages(response.data.total_pages);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        fetchMovies(); // Call the function to fetch movies based on current state\n    }, [selectedGenre, searchQuery, page]); // Re-run whenever these dependencies change\n\n    // Infinite scroll functionality\n    useEffect(() => {\n        const handleScroll = () => {\n            const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n            if (scrollTop + clientHeight >= scrollHeight - 5 && page < totalPages) {\n                setPage(prevPage => prevPage + 1);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [page, totalPages]);\n\n    // Function to add or remove a movie from favorites\n    const toggleFavorite = (movie) => {\n        if (favorites.some(favorite => favorite.id === movie.id)) {\n            setFavorites(favorites.filter(fav => fav.id !== movie.id)); // Remove if already a favorite\n        } else {\n            setFavorites([...favorites, movie]); // Add to favorites\n        }\n    };\n\n    // Filtered movies based on search query\n    const filteredMovies = movies.filter(movie =>\n        movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <FavoritesProvider>\n            <Router>\n                <div className=\"app-container\">\n                    <h1>Tamil Movie Recommendations</h1>\n\n                    {/* Top navigation bar */}\n                    <nav>\n                        <Link to=\"/\">Home</Link>\n                        <Link to=\"/favorites\">Favorites</Link> {/* Link to Favorites Page */}\n                    </nav>\n\n                    {/* Search bar for searching movies */}\n                    <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n\n                    {/* Filter bar for filtering by genre */}\n                    <FilterBar genres={genres} selectedGenre={selectedGenre} setSelectedGenre={setSelectedGenre} />\n\n                    <Routes>\n                        {/* List of movies with option to add to favorites */}\n                        <Route path=\"/\" element={<MovieList movies={filteredMovies} toggleFavorite={toggleFavorite} />} />\n                        {/* Favorites Page */}\n                        <Route path=\"/favorites\" element={<FavoritesPage favorites={favorites} toggleFavorite={toggleFavorite} />} />\n                    </Routes>\n                </div>\n            </Router>\n        </FavoritesProvider>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}